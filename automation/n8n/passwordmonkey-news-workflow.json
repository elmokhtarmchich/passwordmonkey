{
  "name": "Password Monkey News Pipeline",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 6
            }
          ]
        },
        "timezone": "={{ $vars.TIMEZONE || 'UTC' }}"
      },
      "id": "cron-trigger",
      "name": "Cron Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "feed1",
              "name": "feed",
              "value": "https://thehackernews.com/feeds/posts/default?alt=rss",
              "type": "string"
            },
            {
              "id": "source1",
              "name": "source",
              "value": "The Hacker News",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "set-feed1",
      "name": "Set Feed 1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        460,
        200
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "feed2",
              "name": "feed",
              "value": "https://www.securityweek.com/feed/",
              "type": "string"
            },
            {
              "id": "source2",
              "name": "source",
              "value": "Security Week",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "set-feed2",
      "name": "Set Feed 2",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "feed3",
              "name": "feed",
              "value": "https://www.bleepingcomputer.com/feed/",
              "type": "string"
            },
            {
              "id": "source3",
              "name": "source",
              "value": "Bleeping Computer",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "set-feed3",
      "name": "Set Feed 3",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        460,
        400
      ]
    },
    {
      "parameters": {
        "url": "={{ $json.feed }}",
        "options": {
          "response": {
            "responseFormat": "autodetect"
          }
        }
      },
      "id": "rss-read",
      "name": "RSS Read",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Normalize RSS items to standard format\nconst items = [];\n\nfor (const item of $input.all()) {\n  const rssItem = item.json;\n  \n  // Get source from the previous node\n  const source = item.json.source || 'Unknown';\n  \n  const normalizedItem = {\n    source: source,\n    title: rssItem.title || '',\n    link: rssItem.link || '',\n    publishedAt: rssItem.pubDate || rssItem.published || new Date().toISOString(),\n    author: rssItem.author || rssItem.creator || null,\n    description: rssItem.description || rssItem.summary || null,\n    content: rssItem.content || rssItem['content:encoded'] || rssItem.description || null\n  };\n  \n  items.push({ json: normalizedItem });\n}\n\nreturn items;"
      },
      "id": "normalize-items",
      "name": "Normalize Items",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Filter items by keywords\nconst keywords = ($vars.NEWS_KEYWORDS || 'password,breach,authentication,cybersecurity')\n  .toLowerCase()\n  .split(',')\n  .map(k => k.trim());\n\nconst item = $input.first().json;\nconst textToSearch = [\n  item.title || '',\n  item.description || '',\n  item.content || ''\n].join(' ').toLowerCase();\n\n// Check if any keyword matches (word boundary friendly)\nconst hasMatch = keywords.some(keyword => {\n  const regex = new RegExp('\\\\b' + keyword.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\b', 'i');\n  return regex.test(textToSearch);\n});\n\nif (hasMatch) {\n  return [{ json: item }];\n} else {\n  return [];\n}"
      },
      "id": "keyword-filter",
      "name": "Keyword Filter",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "use-summary-check",
              "leftValue": "={{ $vars.USE_SUMMARY }}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-summary",
      "name": "Check Summary",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1340,
        300
      ]
    },
    {
      "parameters": {
        "resource": "chat",
        "model": "gpt-4o-mini",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You write neutral, factual 1-3 paragraph news summaries about cybersecurity. Focus on password-related details, removing vendor fluff. Maintain attribution to the original source."
            },
            {
              "role": "user",
              "content": "Title: {{ $json.title }}\n\nDescription: {{ $json.description }}\n\nContent: {{ $json.content?.substring(0, 2000) }}\n\nPlease summarize this in 1-3 paragraphs with HTML formatting (p tags only)."
            }
          ]
        },
        "options": {}
      },
      "id": "openai-summarize",
      "name": "OpenAI Summarize",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.4,
      "position": [
        1560,
        200
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "summary-content",
              "name": "summaryContent",
              "value": "={{ $json.choices?.[0]?.message?.content || $json.content || $json.description }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "set-summary",
      "name": "Set Summary",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1780,
        200
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "no-summary",
              "name": "summaryContent",
              "value": "={{ $json.content || $json.description }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "set-no-summary",
      "name": "Set No Summary",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1560,
        400
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "id": "merge-summary",
      "name": "Merge Summary",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1900,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Generate filename and HTML content\nconst crypto = require('crypto');\nconst item = $input.first().json;\n\n// Slugify title\nfunction slugify(text) {\n  return text\n    .toLowerCase()\n    .replace(/[^a-z0-9\\s-]/g, '')\n    .replace(/\\s+/g, '-')\n    .replace(/-+/g, '-')\n    .replace(/^-+|-+$/g, '')\n    .substring(0, 50);\n}\n\n// Generate hash from link\nconst hash = crypto.createHash('sha256').update(item.link).digest('hex').substring(0, 6);\n\n// Format dates\nconst publishDate = new Date(item.publishedAt);\nconst publishDateYMD = publishDate.toISOString().split('T')[0];\nconst publishDateHuman = publishDate.toLocaleDateString('en-US', { \n  year: 'numeric', \n  month: 'short', \n  day: 'numeric' \n});\nconst publishYear = publishDate.getFullYear();\n\n// Create filename\nconst slug = slugify(item.title);\nconst filename = `${publishDateYMD}-${slug}-${hash}.html`;\n\n// Prepare description (150-160 chars)\nconst description = (item.summaryContent || item.description || item.title)\n  .replace(/<[^>]*>/g, '')\n  .substring(0, 160)\n  .replace(/\\s+$/, '');\n\n// Prepare body HTML\nlet bodyHtml = item.summaryContent || item.content || item.description || '';\nif (!bodyHtml.includes('<p>')) {\n  bodyHtml = `<p>${bodyHtml}</p>`;\n}\n\n// Generate HTML\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>${item.title} | Password Monkey</title>\n  <meta name=\"description\" content=\"${description}\">\n  <meta name=\"date\" content=\"${publishDateYMD}\">\n  <script type=\"application/ld+json\">\n  {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"NewsArticle\",\n    \"headline\": \"${item.title}\",\n    \"datePublished\": \"${item.publishedAt}\",\n    \"dateModified\": \"${item.publishedAt}\",\n    \"author\": { \"@type\": \"Organization\", \"name\": \"Password Monkey\" },\n    \"publisher\": {\n      \"@type\": \"Organization\",\n      \"name\": \"Password Monkey\",\n      \"logo\": { \"@type\": \"ImageObject\", \"url\": \"${$vars.SITE_BASE_URL || 'https://passwordmonkey.org'}/logo.png\" }\n    }\n  }\n  </script>\n</head>\n<body>\n  <header>\n    <nav>\n      <a href=\"/\">Home</a> | \n      <a href=\"/news\">News</a>\n    </nav>\n  </header>\n\n  <main>\n    <article>\n      <h1>${item.title}</h1>\n      <p><strong>Published:</strong> ${publishDateHuman} | <strong>Author:</strong> Password Monkey</p>\n      ${bodyHtml}\n      <p><em>Source: <a href=\"${item.link}\" target=\"_blank\" rel=\"noopener\">${item.source}</a></em></p>\n    </article>\n  </main>\n\n  <footer>\n    <p>© ${publishYear} Password Monkey | <a href=\"/\">Home</a></p>\n  </footer>\n</body>\n</html>`;\n\nreturn [{\n  json: {\n    ...item,\n    filename: filename,\n    htmlContent: html,\n    base64Content: Buffer.from(html).toString('base64')\n  }\n}];"
      },
      "id": "generate-html",
      "name": "Generate HTML",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2120,
        300
      ]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "=https://api.github.com/repos/{{ $vars.GITHUB_OWNER || 'elmokhtarmchich' }}/{{ $vars.GITHUB_REPO || 'passwordmonkey' }}/contents/news/{{ $json.filename }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "nodeCredentialType": "httpHeaderAuth",
        "options": {
          "response": {
            "responseFormat": "autodetect"
          },
          "queryParameters": {
            "parameters": [
              {
                "name": "ref",
                "value": "={{ $vars.GITHUB_BRANCH || 'main' }}"
              }
            ]
          }
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $vars.GITHUB_TOKEN }}"
            },
            {
              "name": "Accept",
              "value": "application/vnd.github+json"
            }
          ]
        }
      },
      "id": "check-file-exists",
      "name": "Check File Exists",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2340,
        300
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "file-not-exists",
              "leftValue": "={{ $('Check File Exists').item.json.error?.status }}",
              "rightValue": "404",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-404",
      "name": "Check 404",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2560,
        300
      ]
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://api.github.com/repos/{{ $vars.GITHUB_OWNER || 'elmokhtarmchich' }}/{{ $vars.GITHUB_REPO || 'passwordmonkey' }}/contents/news/{{ $('Generate HTML').item.json.filename }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "nodeCredentialType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "message",
              "value": "=chore(news): add {{ $('Generate HTML').item.json.filename }}"
            },
            {
              "name": "content",
              "value": "={{ $('Generate HTML').item.json.base64Content }}"
            },
            {
              "name": "branch",
              "value": "={{ $vars.GITHUB_BRANCH || 'main' }}"
            }
          ]
        },
        "options": {
          "response": {
            "responseFormat": "autodetect"
          }
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $vars.GITHUB_TOKEN }}"
            },
            {
              "name": "Accept",
              "value": "application/vnd.github+json"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        }
      },
      "id": "create-file",
      "name": "Create File",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2780,
        200
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "skip-reason",
              "name": "action",
              "value": "skipped",
              "type": "string"
            },
            {
              "id": "skip-file",
              "name": "filename",
              "value": "={{ $('Generate HTML').item.json.filename }}",
              "type": "string"
            },
            {
              "id": "skip-msg",
              "name": "reason",
              "value": "file already exists",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "log-skip",
      "name": "Log Skip",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2780,
        400
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "created-action",
              "name": "action",
              "value": "created",
              "type": "string"
            },
            {
              "id": "created-file",
              "name": "filename",
              "value": "={{ $('Generate HTML').item.json.filename }}",
              "type": "string"
            },
            {
              "id": "created-sha",
              "name": "commitSha",
              "value": "={{ $json.commit?.sha }}",
              "type": "string"
            },
            {
              "id": "created-path",
              "name": "path",
              "value": "=news/{{ $('Generate HTML').item.json.filename }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "log-created",
      "name": "Log Created",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3000,
        200
      ]
    }
  ],
  "connections": {
    "Cron Trigger": {
      "main": [
        [
          {
            "node": "Set Feed 1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Set Feed 2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Set Feed 3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Feed 1": {
      "main": [
        [
          {
            "node": "RSS Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Feed 2": {
      "main": [
        [
          {
            "node": "RSS Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Feed 3": {
      "main": [
        [
          {
            "node": "RSS Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS Read": {
      "main": [
        [
          {
            "node": "Normalize Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Items": {
      "main": [
        [
          {
            "node": "Keyword Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Keyword Filter": {
      "main": [
        [
          {
            "node": "Check Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Summary": {
      "main": [
        [
          {
            "node": "OpenAI Summarize",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set No Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Summarize": {
      "main": [
        [
          {
            "node": "Set Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Summary": {
      "main": [
        [
          {
            "node": "Merge Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set No Summary": {
      "main": [
        [
          {
            "node": "Merge Summary",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Summary": {
      "main": [
        [
          {
            "node": "Generate HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate HTML": {
      "main": [
        [
          {
            "node": "Check File Exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check File Exists": {
      "main": [
        [
          {
            "node": "Check 404",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check 404": {
      "main": [
        [
          {
            "node": "Create File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Skip",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create File": {
      "main": [
        [
          {
            "node": "Log Created",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-08-22T12:00:00.000Z",
  "versionId": "1"
}