{
  "name": "PasswordMonkey – Automated News Fetch & Publish",
  "nodes": [
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyX",
              "unit": "hours",
              "value": 6
            }
          ]
        }
      },
      "id": "CronTrigger",
      "name": "Cron Trigger (6h)",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        200,
        200
      ],
      "notes": "Runs every 6 hours to fetch cybersecurity/password news.",
      "notesInFlow": true
    },
    {
      "parameters": {},
      "id": "ManualTrigger",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        200,
        380
      ],
      "notes": "Optional manual run for on-demand fetching.",
      "notesInFlow": true
    },
    {
      "parameters": {
        "mode": "passThrough"
      },
      "id": "StartMerge",
      "name": "Start",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        420,
        290
      ],
      "notes": "Unify manual/cron triggers.",
      "notesInFlow": true
    },
    {
      "parameters": {
        "url": "https://thehackernews.com/rss"
      },
      "id": "RssTHN",
      "name": "RSS – TheHackerNews",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        640,
        120
      ],
      "notes": "Fetch articles from TheHackerNews RSS.",
      "notesInFlow": true
    },
    {
      "parameters": {
        "url": "https://securityweek.com/feed/"
      },
      "id": "RssSecurityWeek",
      "name": "RSS – SecurityWeek",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        640,
        290
      ],
      "notes": "Fetch articles from SecurityWeek RSS.",
      "notesInFlow": true
    },
    {
      "parameters": {
        "url": "https://bleepingcomputer.com/feed/"
      },
      "id": "RssBleeping",
      "name": "RSS – BleepingComputer",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        640,
        460
      ],
      "notes": "Fetch articles from BleepingComputer RSS.",
      "notesInFlow": true
    },
    {
      "parameters": {
        "mode": "append"
      },
      "id": "MergeA",
      "name": "Merge Feeds (A)",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        860,
        210
      ],
      "notes": "Combine THN + SecurityWeek",
      "notesInFlow": true
    },
    {
      "parameters": {
        "mode": "append"
      },
      "id": "MergeB",
      "name": "Merge Feeds (B)",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        1080,
        290
      ],
      "notes": "Append BleepingComputer",
      "notesInFlow": true
    },
    {
      "parameters": {
        "functionCode": "const KEYWORDS = ({{$env.NEWS_KEYWORDS || 'password,breach,authentication,cybersecurity'}}).split(',').map(k => k.trim().toLowerCase()).filter(Boolean);\nconst seen = new Set();\nreturn items.filter(item => {\n  const j = item.json || {};\n  const t = (j.title || '').toLowerCase();\n  const d = (j.contentSnippet || j.content || j.description || '').toLowerCase();\n  const matches = KEYWORDS.some(k => t.includes(k) || d.includes(k));\n  if (!matches) return false;\n  const key = (j.link || j.guid || j.title || '').toLowerCase();\n  if (seen.has(key)) return false;\n  seen.add(key);\n  return true;\n});"
      },
      "id": "FilterKeywords",
      "name": "Filter Keywords",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        1300,
        290
      ],
      "notes": "Keep items containing any of: password, breach, authentication, cybersecurity (configurable via env NEWS_KEYWORDS).",
      "notesInFlow": true
    },
    {
      "parameters": {
        "functionCode": "const crypto = require('crypto');\nfunction toSlug(s) {\n  return (s || '')\n    .toLowerCase()\n    .replace(/&amp;|&/g, ' and ')\n    .replace(/[^a-z0-9\\s-]/g, '')\n    .trim()\n    .replace(/\\s+/g, '-')\n    .replace(/-+/g, '-')\n    .slice(0, 60);\n}\nfunction ymd(dateStr) {\n  const d = dateStr ? new Date(dateStr) : new Date();\n  if (isNaN(d)) return new Date().toISOString().slice(0,10);\n  return d.toISOString().slice(0,10);\n}\nreturn items.map(item => {\n  const j = item.json;\n  const title = j.title || 'Untitled';\n  const link = j.link || j.guid || '';\n  const pubDate = j.isoDate || j.pubDate || j.pubdate || j.date || null;\n  const date = ymd(pubDate);\n  const desc = (j.contentSnippet || j.content || j.description || '').toString().replace(/\\s+/g, ' ').trim();\n  const hash = crypto.createHash('md5').update(link || title).digest('hex').slice(0,8);\n  const slug = toSlug(title) || `news-${hash}`;\n  const filenameNoExt = `${date}-${slug}-${hash}`;\n  const filename = `${filenameNoExt}.html`;\n  return { json: { title, link, pubDate: pubDate || new Date().toUTCString(), description: desc, date, slug, hash, filename, filenameNoExt } };\n});"
      },
      "id": "Transform",
      "name": "Transform & Filename",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        1520,
        290
      ],
      "notes": "Normalize fields and generate safe, unique filename: yyyy-mm-dd-title-hash.html",
      "notesInFlow": true
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [],
          "number": [],
          "string": [
            {
              "value1": "={{$env.USE_SUMMARY || 'false'}}",
              "operation": "contains",
              "value2": "true"
            }
          ]
        }
      },
      "id": "IfUseSummary",
      "name": "Use LLM Summary?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1740,
        290
      ],
      "notes": "Toggle summarization via env USE_SUMMARY=true.",
      "notesInFlow": true
    },
    {
      "parameters": {
        "operation": "chat",
        "model": "gpt-4o-mini",
        "messages": {
          "message": [
            {
              "text": "Summarize this news item in 80-120 words, clear and neutral tone. Include only facts from the text.\n\nTitle: {{$json.title}}\n\nDescription: {{$json.description}}\n\nIf description appears truncated, write a concise evergreen summary about the topic.",
              "type": "user"
            }
          ]
        },
        "additionalFields": {
          "temperature": 0.3,
          "maxTokens": 220
        }
      },
      "id": "OpenAIChat",
      "name": "OpenAI – Summarize",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 4,
      "position": [
        1960,
        180
      ],
      "notes": "Optional: uses OpenAI to create concise summary.",
      "credentials": {
        "openAiApi": {
          "id": "OpenAI API",
          "name": "OpenAI API"
        }
      },
      "notesInFlow": true
    },
    {
      "parameters": {
        "functionCode": "// Pass-through when not summarizing; use description as content summary.\nreturn items.map(item => ({ json: { ...item.json, summary: item.json.description } }));"
      },
      "id": "NoSummary",
      "name": "No Summary",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        1960,
        410
      ],
      "notes": "If summarization disabled, reuse description.",
      "notesInFlow": true
    },
    {
      "parameters": {
        "functionCode": "// Attach LLM summary string from OpenAI node output\nreturn items.map(item => {\n  const text = item.json.choices?.[0]?.message?.content || item.json.text || '';\n  return { json: { ...item.json, summary: text } };\n});"
      },
      "id": "ExtractSummary",
      "name": "Extract LLM Text",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        2160,
        180
      ],
      "notes": "Map OpenAI response to json.summary.",
      "notesInFlow": true
    },
    {
      "parameters": {
        "mode": "passThrough"
      },
      "id": "Collected",
      "name": "Collected Articles",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        2160,
        310
      ],
      "notes": "Unify summarized and non-summarized items.",
      "notesInFlow": true
    },
    {
      "parameters": {
        "url": "=https://raw.githubusercontent.com/{{$env.GITHUB_OWNER}}/{{$env.GITHUB_REPO}}/{{ $env.GITHUB_BRANCH || 'main' }}/news/article-template.html",
        "responseFormat": "string",
        "options": {
          "fullResponse": false
        }
      },
      "id": "FetchTemplate",
      "name": "Fetch Article Template",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        2360,
        290
      ],
      "notes": "Fetches /news/article-template.html from repo. Set env GITHUB_OWNER, GITHUB_REPO, GITHUB_BRANCH.",
      "notesInFlow": true
    },
    {
      "parameters": {
        "functionCode": "// Render HTML using template from FetchTemplate and articles from Collected.\nfunction escapeHtml(s){return (s||'').replace(/[&<>\\\"']/g, c=>({ '&':'&amp;','<':'&lt;','>':'&gt;','\\\"':'&quot;','\\'':'&apos;' }[c]));}\nconst tplItems = $items('Fetch Article Template','main',0);\nconst tplBody = tplItems && tplItems[0] && tplItems[0].json ? tplItems[0].json.body : null;\nconst template = tplBody || `<!DOCTYPE html>\n<html lang=\\"en\\">\n<head>\n<meta charset=\\"UTF-8\\">\n<meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\">\n<title>[Article Title] | Password Monkey</title>\n<meta name=\\"description\\" content=\\"[Meta Description]\\">\n<meta name=\\"date\\" content=\\"[Publish Date]\\">\n<meta name=\\"author\\" content=\\"PasswordMonkey\\">\n<script type=\\"application/ld+json\\">{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"NewsArticle\\",\\"headline\\":\\"[Article Title]\\",\\"description\\":\\"[Meta Description]\\",\\"datePublished\\":\\"[Publish Date]T12:00:00Z\\",\\"dateModified\\":\\"[Publish Date]T12:00:00Z\\",\\"author\\":{\\"@type\\":\\"Organization\\",\\"name\\":\\"PasswordMonkey\\"},\\"mainEntityOfPage\\":{\\"@type\\":\\"WebPage\\",\\"@id\\":\\"https://passwordmonkey.org/news/[filename].html\\"}}<\\/script>\n<link rel=\\"stylesheet\\" href=\\"../style.css\\">\n</head>\n<body>\n<main>\n<h1>[Article Title]</h1>\n<time datetime=\\"[Publish Date]\\">[Publish Date]</time>\n<div>[Full Article Content]</div>\n<p>Source: <a href=\\"[SourceURL]\\" rel=\\"noopener nofollow ugc\\">[SourceURL]</a></p>\n<a href=\\"index.html\\">Back to News</a>\n</main>\n</body>\n</html>`;\nconst articleItems = $items('Collected Articles','main',0) || [];\nreturn articleItems.map(i => {\n  const j = i.json;\n  const title = j.title;\n  const date = j.date;\n  const filenameNoExt = j.filenameNoExt;\n  const metaDesc = (j.summary || j.description || '').slice(0, 300);\n  const content = `<p>${escapeHtml(j.summary || j.description || '')}</p>`;\n  let html = template;\n  html = html.replaceAll('[Article Title]', escapeHtml(title));\n  html = html.replaceAll('[Meta Description]', escapeHtml(metaDesc));\n  html = html.replaceAll('[Publish Date]', escapeHtml(date));\n  html = html.replaceAll('[filename]', escapeHtml(filenameNoExt));\n  html = html.replace('[Full Article Content]', content);\n  html = html.replace('[Source / Reference if applicable]', `<a href=\\"${escapeHtml(j.link)}\\" rel=\\"noopener nofollow ugc\\">${escapeHtml(j.link)}</a>`);\n  html = html.replace('[SourceURL]', escapeHtml(j.link));\n  return { json: { ...j, html } };\n});"
      },
      "id": "RenderHTML",
      "name": "Render HTML",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        2580,
        290
      ],
      "notes": "Fill placeholders in the template with article data.",
      "notesInFlow": true
    },
    {
      "parameters": {
        "setAllData": false,
        "options": {},
        "fields": {
          "string": [
            {
              "name": "data",
              "value": "={{$json.html}}"
            },
            {
              "name": "fileName",
              "value": "={{$json.filename}}"
            }
          ]
        }
      },
      "id": "PrepareBinary",
      "name": "Prepare Binary",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        2800,
        290
      ],
      "notes": "Prepare fields for binary conversion and commit.",
      "notesInFlow": true
    },
    {
      "parameters": {
        "mode": "jsonToBinary",
        "mimeType": "text/html",
        "options": {
          "fileName": "={{$json.fileName}}"
        }
      },
      "id": "ToBinary",
      "name": "To Binary",
      "type": "n8n-nodes-base.moveBinaryData",
      "typeVersion": 1,
      "position": [
        3000,
        290
      ],
      "notes": "Convert html string to binary for optional file write.",
      "notesInFlow": true
    },
    {
      "parameters": {
        "fileName": "={{$env.REPO_BASE_PATH ? $env.REPO_BASE_PATH + '/news/' + $json.fileName : ''}}",
        "fileContent": "={{$json.data}}",
        "useBinary": true,
        "binaryPropertyName": "data"
      },
      "id": "WriteLocal",
      "name": "Write File (optional)",
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [
        3200,
        200
      ],
      "notes": "If REPO_BASE_PATH is set and repo is mounted, write /news/<filename>.html locally.",
      "notesInFlow": true
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubApi",
        "requestMethod": "GET",
        "url": "=https://api.github.com/repos/{{$env.GITHUB_OWNER}}/{{$env.GITHUB_REPO}}/contents/news/{{$json.fileName}}?ref={{$env.GITHUB_BRANCH || 'main'}}",
        "options": {
          "fullResponse": true,
          "ignoreResponseCode": true
        }
      },
      "id": "CheckExists",
      "name": "GitHub – Check File Exists",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        3200,
        380
      ],
      "notes": "Avoid duplicates by checking if file already exists in repo.",
      "credentials": {
        "githubApi": {
          "id": "GitHub API",
          "name": "GitHub API"
        }
      },
      "notesInFlow": true
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$json.statusCode || $json.status}}",
              "operation": "equal",
              "value2": 200
            }
          ]
        }
      },
      "id": "IfExists",
      "name": "File Exists?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        3400,
        380
      ],
      "notes": "If 200, skip commit; else create the file.",
      "notesInFlow": true
    },
    {
      "parameters": {
        "operation": "createOrUpdateFile",
        "owner": "={{$env.GITHUB_OWNER}}",
        "repository": "={{$env.GITHUB_REPO}}",
        "filePath": "=news/{{$json.fileName}}",
        "additionalFields": {
          "branch": "={{$env.GITHUB_BRANCH || 'main'}}",
          "commitMessage": "=chore(news): add {{$json.title}}",
          "fileContent": "={{$json.data}}"
        }
      },
      "id": "CommitFile",
      "name": "GitHub – Commit File",
      "type": "n8n-nodes-base.github",
      "typeVersion": 2,
      "position": [
        3620,
        290
      ],
      "credentials": {
        "githubApi": {
          "id": "GitHub API",
          "name": "GitHub API"
        }
      },
      "notes": "Commit generated HTML to /news/ on the repo to trigger GitHub Actions.",
      "notesInFlow": true
    },
    {
      "parameters": {
        "functionCode": "const skipped = $input.all().length;\nreturn [{ json: { skipped } }];"
      },
      "id": "SkippedCount",
      "name": "Skipped (Existing)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        3620,
        470
      ],
      "notes": "Count files skipped due to duplicates.",
      "notesInFlow": true
    }
  ],
  "connections": {
    "Cron Trigger (6h)": {
      "main": [
        [
          {
            "node": "Start",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Start",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Start": {
      "main": [
        [
          {
            "node": "RSS – TheHackerNews",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "RSS – SecurityWeek",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "RSS – BleepingComputer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS – TheHackerNews": {
      "main": [
        [
          {
            "node": "Merge Feeds (A)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS – SecurityWeek": {
      "main": [
        [
          {
            "node": "Merge Feeds (A)",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "RSS – BleepingComputer": {
      "main": [
        [
          {
            "node": "Merge Feeds (B)",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Feeds (A)": {
      "main": [
        [
          {
            "node": "Merge Feeds (B)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Feeds (B)": {
      "main": [
        [
          {
            "node": "Filter Keywords",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Keywords": {
      "main": [
        [
          {
            "node": "Transform & Filename",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform & Filename": {
      "main": [
        [
          {
            "node": "Use LLM Summary?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Use LLM Summary?": {
      "main": [
        [
          {
            "node": "OpenAI – Summarize",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI – Summarize": {
      "main": [
        [
          {
            "node": "Extract LLM Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract LLM Text": {
      "main": [
        [
          {
            "node": "Collected Articles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Summary": {
      "main": [
        [
          {
            "node": "Collected Articles",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Collected Articles": {
      "main": [
        [
          {
            "node": "Fetch Article Template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Article Template": {
      "main": [
        [
          {
            "node": "Render HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Render HTML": {
      "main": [
        [
          {
            "node": "Prepare Binary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Binary": {
      "main": [
        [
          {
            "node": "To Binary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "To Binary": {
      "main": [
        [
          {
            "node": "Write File (optional)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GitHub – Check File Exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GitHub – Check File Exists": {
      "main": [
        [
          {
            "node": "File Exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Exists?": {
      "main": [
        [
          {
            "node": "Skipped (Existing)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GitHub – Commit File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "staticData": {},
  "meta": {
    "workflowType": "regular"
  },
  "settings": {
    "saveExecutionProgress": "DEFAULT",
    "saveManualExecutions": true
  }
}